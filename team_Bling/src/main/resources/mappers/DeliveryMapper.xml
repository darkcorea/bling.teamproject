<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.project.bling.mapper.deliveryMapper">

	<!-- 날짜 검색 반복되는 쿼리문 -->
	<sql id="date_search">
		<if test='scri.kind == "B"'>AND DATE_FORMAT(ord.rdate,'%Y-%m-%d') = DATE_FORMAT(sysdate(),'%Y-%m-%d')</if>
		<if test='scri.kind == "C"'><![CDATA[AND ord.rdate >= DATE_ADD(sysdate(), INTERVAL -1 WEEK )]]></if>
		<if test='scri.kind == "D"'><![CDATA[AND ord.rdate >= DATE_ADD(sysdate(), INTERVAL -1 MONTH )]]></if>
		<if test='scri.kind == "E"'><![CDATA[AND ord.rdate >= DATE_ADD(sysdate(), INTERVAL -3 MONTH )]]></if>
		<if test='scri.kind == "F"'><![CDATA[AND ord.rdate >= DATE_ADD(sysdate(), INTERVAL -6 MONTH )]]></if>
		<if test='scri.kind == "G"'>AND ord.rdate BETWEEN DATE_FORMAT(#{scri.rdate1},'%Y-%m-%d') AND DATE_FORMAT(#{scri.rdate2},'%Y-%m-%d')</if>
	</sql>
	
	
	<!-- 페이징에 필요한 배송정보 총 갯수 -->
	<select id="delivery_count" parameterType="PageMaker" resultType="int">
		SELECT count(*) FROM bg_order ord WHERE midx=#{midx}
		<include refid="date_search"></include>

	</select>

	<!-- midx로 배송 정보 가져오기 뷰 만들어서 함 -->
	<select id="deivery_list" parameterType="PageMaker" resultType="CombineVO">
		SELECT * FROM (
			SELECT ord.order_idx, od.detail_idx, ord.rdate, im.main, pr.pname, op.oname, od.quantity , ord.tot_price,
			de.cancel, de.refund, de.exchange, de.deli_stat, re.ridx, de.invoice_num, de.confirm_yn
			,COUNT(*) OVER(PARTITION BY ord.order_idx) AS count
			,SUM(od.quantity) OVER(PARTITION BY ord.order_idx) AS quantitySum
		    ,TIMESTAMPDIFF(DAY, de.deli_com, now()) AS date_differ
		    ,ROW_NUMBER() OVER(PARTITION BY ord.order_idx ORDER BY ord.order_idx desc, re.ridx IS NULL desc )AS RNUM
		    ,pr.cuidx as cuidx
			FROM bg_order_detail od
			JOIN bg_order ord ON ord.order_idx = od.order_idx
			JOIN bg_option op ON op.oidx = od.oidx
			JOIN bg_product pr ON pr.pidx = op.pidx
			JOIN BG_IMAGE im ON im.pidx = pr.pidx
			JOIN bg_delivery de ON de.order_idx = ord.order_idx
			LEFT OUTER JOIN  open_a_2021.bg_review re ON re.DETAIL_IDX = od.detail_idx
			WHERE ord.midx=#{midx}
			<include refid="date_search"></include>

			ORDER BY ord.order_idx desc, re.ridx IS NULL desc) A
        WHERE RNUM =1
        Limit #{startPost},#{scri.perPageNum}
	</select>
	  
	 <!-- order_idx로  추가 마일리지가 있는지 계산 --> 
	<select id="addmileage_check" parameterType="int" resultType="int">
		SELECT addmileage FROM bg_order WHERE order_idx=#{order_idx}
	</select>
	  
	 <!-- order_idx로 구매확정 하기 -->
	 <update id="confirm_fn" parameterType="int">
	 	UPDATE bg_delivery SET confirm_yn='Y' WHERE order_idx=#{order_idx}
	 </update>
	  
	  <!-- addmileage값을 가져와서 회원 마일리지에 더하기ㅡㅑ -->
	  <update id="addmileage_user" parameterType="CombineVO">
	  	UPDATE bg_user SET mileage=mileage+#{mileage} where midx=#{midx}
	  </update>
	  
	  <!-- order_idx로 적립금 0원으로 만들기 -->
	 <update id="addmileage_zero" parameterType="int">
	 	UPDATE bg_order SET addmileage=0 WHERE order_idx=#{order_idx}
	 </update>
	  
	  <!-- order_idx로 구매한 상품들 정보 가져 오기 -->
	  <select id="order_list" parameterType="int" resultType="CombineVO">
	 	SELECT bp.pidx, bo.recipient, bo.rphone, bo.addr1, bo.addr2, bp.pname, bi.main, bop.oname, 
	  			bod.quantity, bo.payment, bo.tot_price,bo.zip_code,bo.order_idx, re.ridx, bod.detail_idx,bp.cuidx
		FROM bg_order bo
		JOIN bg_order_detail bod ON bo.order_idx = bod.order_idx
		JOIN bg_option bop ON bod.oidx = bop.oidx
		JOIn bg_product bp ON bp.pidx = bop.pidx
		JOIN bg_image bi oN bi.pidx = bp.pidx
        LEFT OUTER JOIN  bg_review re ON re.DETAIL_IDX = bod.detail_idx
		WHERE bo.order_idx=#{order_idx}
	  </select>
	  
	  <!-- 구매한 물품에 대한 교환/취소/반품 메세지 등록 -->
	  <insert id="return_delivery_question" parameterType="QuestionVO">
	  	INSERT INTO bg_question (qidx, originqidx, midx, category, title, content, order_idx)
		VALUES (#{qidx}, #{qidx}, #{midx}, #{category}, #{title}, #{content}, #{order_idx} )
		<selectKey resultType="int" keyProperty="qidx" order="BEFORE">
          SELECT MAX(qidx)+1 FROM bg_question
       </selectKey>
	  </insert>
	  
	  <!-- 구매한 물품에 대한 교환,취소,환불 배송정보 변경 -->
	  <update id="return_delivery" parameterType="CombineVO">
	  	UPDATE bg_delivery SET rdate = now()
	  	  	<if test='kind == "D"'>,exchange = 'N'</if>
	  	   	<if test='kind == "E"'>,refund = 'N'</if>
	  		<if test='kind == "F"'>,cancel = 'N'</if>
	  	WHERE order_idx=#{order_idx}
	  </update>
	  
	  <!-- 취소반품 교환 내역 페이징에 필요한 총 카운트-->
	  <select id="re_delivery_count" parameterType="PageMaker" resultType="int">
		SELECT count(*) FROM bg_delivery de
		JOIN bg_order ord ON ord.order_idx=de.order_idx
		WHERE ord.midx=#{midx} AND ( de.cancel is not null OR de.refund is not null OR de.exchange is not null)
		<include refid="date_search"></include>

	</select>
	  
	  
	  <!-- 주문내역 중에 취소반품 교환 내역 -->
	  <select id="re_deivery_list" parameterType="PageMaker" resultType="CombineVO">
	  SELECT * FROM (
			SELECT ord.order_idx, od.detail_idx, ord.rdate, im.main, pr.pname, op.oname, od.quantity , ord.tot_price,
			de.cancel, de.refund, de.exchange, de.invoice_num, de.rdate as rdate1
			,COUNT(*) OVER(PARTITION BY ord.order_idx) AS count
			,SUM(od.quantity) OVER(PARTITION BY ord.order_idx) AS quantitySum
		    ,ROW_NUMBER() OVER(PARTITION BY ord.order_idx ORDER BY ord.order_idx asc )AS RNUM
			FROM bg_order_detail od
			JOIN bg_order ord ON ord.order_idx = od.order_idx
			JOIN bg_option op ON op.oidx = od.oidx
			JOIN bg_product pr ON pr.pidx = op.pidx
			JOIN BG_IMAGE im ON im.pidx = pr.pidx
			JOIN bg_delivery de ON de.order_idx = ord.order_idx
			WHERE ord.midx=#{midx} and ( de.cancel is not null or de.refund is not null or de.exchange is not null)
			
			<if test='scri.kind == "B"'>AND DATE_FORMAT(de.rdate,'%Y-%m-%d') = DATE_FORMAT(sysdate(),'%Y-%m-%d')</if>
			<if test='scri.kind == "C"'><![CDATA[AND de.rdate >= DATE_ADD(sysdate(), INTERVAL -1 WEEK )]]></if>
			<if test='scri.kind == "D"'><![CDATA[AND de.rdate >= DATE_ADD(sysdate(), INTERVAL -1 MONTH )]]></if>
			<if test='scri.kind == "E"'><![CDATA[AND de.rdate >= DATE_ADD(sysdate(), INTERVAL -3 MONTH )]]></if>
			<if test='scri.kind == "F"'><![CDATA[AND de.rdate >= DATE_ADD(sysdate(), INTERVAL -6 MONTH )]]></if>
			<if test='scri.kind == "G"'>AND de.rdate BETWEEN DATE_FORMAT(#{scri.rdate1},'%Y-%m-%d') AND DATE_FORMAT(#{scri.rdate2},'%Y-%m-%d')</if>
			
			ORDER BY ord.order_idx desc, od.detail_idx desc) A
        WHERE RNUM =1
        Limit #{startPost},#{scri.perPageNum}
	  </select>
	  
	  <!-- 이름과 주문번호로  비회원 주문이 있는지 검색 -->
	  <select id="nonDel_check" parameterType="NonorderVO" resultType="string">
	 	 SELECT orderid FROM bg_nonorder WHERE name=#{name} AND orderid=#{orderid}
	  </select>
	  
	  <!-- 비회원 주문 조회  -->
	  <select id="nonDel_list" parameterType="String" resultType="CombineVO">
	  	SELECT a.orderid, a.rdate, a.recipient, a.phone as rphone, a.zip_code, a.addr1, a.addr2, a.tot_price, e.pidx, b.invoice_num, b.deli_stat,
		e.pname, f.main, d.oname, c.quantity
		FROM bg_nonorder a
		JOIN bg_nondelivery b ON b.nonidx = a.nonidx
		JOIN bg_nonorder_detail c ON c.nonidx = a.nonidx
		JOIN bg_option d ON d.oidx = c.oidx
		JOIN bg_product e ON e.pidx = d.pidx
		JOIN bg_image f ON f.pidx = e.pidx
		WHERE a.orderid = #{orderid}
	  </select>
	  
	<!-- order_idx로  물건을 구매할 때 쓴 마일리지가 있는 지 조회 --> 
	<select id="payed_mileage_check" parameterType="int" resultType="int">
		SELECT payed_mileage FROM bg_order WHERE order_idx=#{order_idx}
	</select>
	
	 <!-- order_idx로 적립금 0원으로 만들기 -->
	 <update id="payed_mileage_zero" parameterType="int">
	 	UPDATE bg_order SET payed_mileage=0 WHERE order_idx=#{order_idx}
	 </update>
	
	 <!-- order_idx로  배송정보에서 구매취소 확정하기 -->
	 <update id="cancle_delivery" parameterType="int">
	 	UPDATE bg_delivery SET cancel='Y', rdate = now() WHERE order_idx=#{order_idx}
	 </update> 
	
</mapper>