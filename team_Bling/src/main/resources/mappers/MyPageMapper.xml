<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.project.bling.mapper.myPageMapper">

	<!-- 회원번호(midx)에 따른 주문수 -->
	<select id="orderCount" parameterType="int" resultType="int">
		SELECT count(*)
		FROM bg_order_detail od
		RIGHT OUTER JOIN bg_order o
		ON od.order_idx=o.order_idx
		WHERE midx=#{midx}
	</select>

	<!-- 회원번호(midx)에 따른 결제완료 건수 -->
	<select id="orderComp" resultType="CombineVO">
		SELECT count(d.order_yn) AS orderCompCnt
		FROM bg_delivery d
		INNER JOIN bg_order o
		ON d.order_idx=o.order_idx
		WHERE d.order_yn='y' AND o.midx=#{midx}
		GROUP BY o.midx
	</select>
	
	<!-- 회원번호(midx)에 따른 배송상태(n:결제미완료,y:결제완료,a:상품준비중,b:배송중,c:배송완료) -->
	<select id="deliveryStat" resultType="CombineVO">
		SELECT count(d.deli_stat) AS deliStatCnt
		FROM bg_delivery d
		INNER JOIN bg_order o
		ON d.order_idx=o.order_idx
		WHERE d.deli_stat=#{deli_stat} AND o.midx=#{midx}
		GROUP BY o.midx
	</select>
	
	<!-- 최근 주문 정보(product,option,order,order_detail,delivery,review 6개 테이블 join) -->
	<select id="recentOrder" resultType="CombineVO" parameterType="PageMaker">
	<![CDATA[
	WITH po
	     AS(
	        SELECT p.pname,
	               p.saleprice,
	               p.pidx,
	               op.oname,
	               op.addprice,
	               op.oidx
	        FROM bg_product p
	        INNER JOIN bg_option op
	        ON p.pidx=op.pidx 
	     ),
	     oOdDr
	     AS(
	        SELECT o.rdate,
	               o.order_idx,
	               od.detail_idx,
	               od.quantity,
	               d.deli_stat,
	               d.cancel,
	               d.refund,
	               d.exchange,
	               d.order_yn,
	               d.deli_com,
	               od.oidx,
	               o.midx,
	               r.ridx,
	               r.contents
	        FROM bg_order_detail od
	        
	        RIGHT OUTER JOIN bg_order o
	        ON od.order_idx=o.order_idx
	        
	        LEFT OUTER JOIN bg_delivery d
	        ON od.order_idx=d.order_idx
	        
	        LEFT OUTER JOIN bg_review r
	        ON od.detail_idx=r.detail_idx
	     )
	SELECT DATE_FORMAT(oOdDr.rdate,'%Y-%m-%d') AS 'rdate',
	       oOdDr.deli_com,
	       DATEDIFF(now(),oOdDr.deli_com) AS 'date_differ',
	       oOdDr.order_idx,
	       oOdDr.detail_idx,
	       po.pidx,
	       po.pname,
	       substring_index(po.oname,'+',1) AS 'oname',
	       po.saleprice,
	       po.addprice,
	       sum(oOdDr.quantity) AS 'quantitySum',
	       oOdDr.deli_stat,
	       oOdDr.cancel,
	       oOdDr.refund,
	       oOdDr.exchange,
	       oOdDr.ridx,
	       oOdDr.contents
	FROM oOdDr
	
	INNER JOIN po
	ON oOdDr.oidx=po.oidx
	WHERE oOdDr.midx=#{midx} AND NOT oOdDr.deli_stat='(null)'
	GROUP BY oOdDr.rdate, oOdDr.deli_com, oOdDr.order_idx,oOdDr.detail_idx,po.pidx,po.pname,po.oname,po.saleprice,po.addprice,oOdDr.deli_stat,oOdDr.ridx,oOdDr.contents
	ORDER BY oOdDr.rdate
	DESC
	LIMIT #{startPost},#{scri.perPageNum}
	]]>
	</select>
	
	
	<!-- 사진 2개 첨부시 -->
	<insert id="reviewWrite" parameterType="CombineVO">
	<!-- <![CDATA[]]> 안의 코드들을 문자열로 인식시킨다. -->
		<![CDATA[
    	INSERT INTO bg_review(
    				ridx,
    				contents,
    				rdate,
    				image1,
    				image2,
    				midx,
    				detail_idx,
    				grade
    				)
    	VALUES(
    		#{ridx}
    		,#{contents}	
    		,sysdate()
    		,#{image1}
    		,#{image2}
    		,#{midx}
    		,#{detail_idx}
    		,#{grade}
    	)
    	]]>
    	<!--
    		selectKey의 결과를 keyProperty에 담는다 
    		order : selectKey를 쿼리문 전에 실행할지 후에 실행할지 정한다.
    		
    		처음 들어가는 값의 경우 MAX값이 NULL이 나오기 때문에 IFNULL을 사용하여 NULL일 경우 1을 넣어주도록 했다.
			* 뒤의 tb_ball에 b를 붙이는 이유는 You can't specify target table '테이블명' for update in FROM clause 에러가
			발생하기 때문. 이 에러는 insert, update, delete에서 서브쿼리로 동일한 테이블의 조건을 사용할 경우 발생한다.
			따라서 서브쿼리 내부의 테이블에 별칭을 부여하면 해결된다.

			출처: https://sdevstudy.tistory.com/22
    	-->
    	<selectKey resultType="int" keyProperty="ridx" order="BEFORE">
    			SELECT IFNULL(MAX(ridx)+1,1) FROM bg_review b
    	</selectKey>
    		
	</insert>
	
	
	<!-- 사진 1개 첨부시 -->
	<insert id="reviewWrite1" parameterType="CombineVO">
	<!-- <![CDATA[]]> 안의 코드들을 문자열로 인식시킨다. -->
		<![CDATA[
    	INSERT INTO bg_review(
    				ridx,
    				contents,
    				rdate,
    				image1,
    				midx,
    				detail_idx,
    				grade
    				)
    	VALUES(
    		#{ridx}
    		,#{contents}	
    		,sysdate()
    		,#{image1}
    		,#{midx}
    		,#{detail_idx}
    		,#{grade}
    	)
    	]]>
    	<!--
    		selectKey의 결과를 keyProperty에 담는다 
    		order : selectKey를 쿼리문 전에 실행할지 후에 실행할지 정한다.
    		
    		처음 들어가는 값의 경우 MAX값이 NULL이 나오기 때문에 IFNULL을 사용하여 NULL일 경우 1을 넣어주도록 했다.
			* 뒤의 tb_ball에 b를 붙이는 이유는 You can't specify target table '테이블명' for update in FROM clause 에러가
			발생하기 때문. 이 에러는 insert, update, delete에서 서브쿼리로 동일한 테이블의 조건을 사용할 경우 발생한다.
			따라서 서브쿼리 내부의 테이블에 별칭을 부여하면 해결된다.

			출처: https://sdevstudy.tistory.com/22
    	-->
    	<selectKey resultType="int" keyProperty="ridx" order="BEFORE">
    			SELECT IFNULL(MAX(ridx)+1,1) FROM bg_review b
    	</selectKey>
    		
	</insert>
	
	
	<!-- 사진 첨부 없는 경우 -->
	<insert id="reviewWrite2" parameterType="CombineVO">
	<!-- <![CDATA[]]> 안의 코드들을 문자열로 인식시킨다. -->
		<![CDATA[
    	INSERT INTO bg_review(
    				ridx,
    				contents,
    				rdate,
    				midx,
    				detail_idx,
    				grade
    				)
    	VALUES(
    		#{ridx}
    		,#{contents}	
    		,sysdate()
    		,#{midx}
    		,#{detail_idx}
    		,#{grade}
    	)
    	]]>
    	<!--
    		selectKey의 결과를 keyProperty에 담는다 
    		order : selectKey를 쿼리문 전에 실행할지 후에 실행할지 정한다.
    		
    		처음 들어가는 값의 경우 MAX값이 NULL이 나오기 때문에 IFNULL을 사용하여 NULL일 경우 1을 넣어주도록 했다.
			* 뒤의 tb_ball에 b를 붙이는 이유는 You can't specify target table '테이블명' for update in FROM clause 에러가
			발생하기 때문. 이 에러는 insert, update, delete에서 서브쿼리로 동일한 테이블의 조건을 사용할 경우 발생한다.
			따라서 서브쿼리 내부의 테이블에 별칭을 부여하면 해결된다.

			출처: https://sdevstudy.tistory.com/22
    	-->
    	<selectKey resultType="int" keyProperty="ridx" order="BEFORE">
    			SELECT IFNULL(MAX(ridx)+1,1) FROM bg_review b
    	</selectKey>
    		
	</insert>
	
	
	<select id="reviewDetail" resultType="CombineVO" parameterType="int">
		WITH pi
		     AS(
		        SELECT p.pidx,
		               p.pname,
		               i.main
		        FROM bg_product p
		        INNER JOIN bg_image i
		        ON p.pidx=i.pidx
		     ),
		     opOodR
		     AS(
		        SELECT op.pidx,
		               op.oname,
		               o.midx,
		               o.rdate,
		               od.quantity,
		               r.ridx,
		               r.contents,
		               r.image1,
		               r.image2,
		               r.grade,
		               r.rdate as rdate1
		        FROM bg_order_detail od
		        
		        RIGHT OUTER JOIN bg_option op
		        ON od.oidx=op.oidx
		        
		        RIGHT OUTER JOIN bg_order o
		        ON od.order_idx=o.order_idx
		        
		        INNER JOIN bg_review r
		        ON od.detail_idx=r.detail_idx
		     )
		SELECT pi.main,
		       pi.pname,
		       opOodR.oname,
		       opOodR.rdate,
		       opOodR.rdate1,
		       opOodR.quantity,
		       opOodR.contents,
		       opOodR.image1,
		       opOodR.image2,
		       opOodR.grade
		FROM pi
		LEFT OUTER JOIN opOodR
		ON pi.pidx=opOodR.pidx
		WHERE opOodR.ridx=#{ridx}
	</select>
	
	
	<delete id="reviewDelete" parameterType="int">
		DELETE FROM bg_review
		WHERE ridx=#{ridx}
	</delete>
	
	<!-- 회원정보수정 첫번째 비밀번호 확인시 갖고오는 이름정보 -->
	<select id="confirm" parameterType="int" resultType="UserVO">
		SELECT * FROM bg_user WHERE midx=#{midx}
	</select>
	
	<!-- 회원정보 수정 -->
	<update id="remodify" parameterType="UserVO">
		UPDATE bg_user SET 
		pwd = #{pwd},
		uname = #{uname},
		email = #{email},
		addr1 = #{addr1},
		addr2 = #{addr2},
		phone = #{phone},
		zip_code = #{zip_code}
		WHERE midx = #{midx}
	</update>
	
	<!-- 탈퇴 -->
	<update id="del" parameterType="int">
		UPDATE bg_user SET
		delyn = 0,
		rdate = sysdate()
		WHERE midx=#{midx}
	</update>
</mapper>