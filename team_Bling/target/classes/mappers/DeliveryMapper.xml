<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.project.bling.mapper.deliveryMapper">

	<!-- 페이징에 필요한 배송정보 총 갯수 -->
	<select id="delivery_count" parameterType="PageMaker" resultType="int">

		SELECT count(*) FROM bg_order WHERE midx=#{midx}
		
		<if test='scri.kind == "B"'><![CDATA[AND rdate >= sysdate()]]></if>
		<if test='scri.kind == "C"'><![CDATA[AND rdate >= DATE_ADD(sysdate(), INTERVAL -1 WEEK )]]></if>
		<if test='scri.kind == "D"'><![CDATA[AND rdate >= DATE_ADD(sysdate(), INTERVAL -1 MONTH )]]></if>
		<if test='scri.kind == "E"'><![CDATA[AND rdate >= DATE_ADD(sysdate(), INTERVAL -3 MONTH )]]></if>
		<if test='scri.kind == "F"'><![CDATA[AND rdate >= DATE_ADD(sysdate(), INTERVAL -6 MONTH )]]></if>
		<if test='scri.kind == "G"'>AND rdate BETWEEN DATE_FORMAT(#{scri.rdate1},'%Y-%m-%d') AND DATE_FORMAT(#{scri.rdate2},'%Y-%m-%d')</if>

	</select>

	<!-- midx로 배송 정보 가져오기 뷰 만들어서 함 -->
	<select id="deivery_list" parameterType="PageMaker" resultType="CombineVO">
		SELECT * FROM (
			SELECT ord.order_idx, od.detail_idx, ord.rdate, im.main, pr.pname, op.oname, od.quantity , ord.tot_price,
			de.cancel, de.refund, de.exchange, de.deli_stat, de.order_yn, re.ridx, de.invoice_num, de.confirm_yn
			,COUNT(*) OVER(PARTITION BY ord.order_idx) AS count
			,SUM(od.quantity) OVER(PARTITION BY ord.order_idx) AS quantitySum
		    ,TIMESTAMPDIFF(DAY, de.deli_com, now()) AS date_differ
		    ,ROW_NUMBER() OVER(PARTITION BY ord.order_idx ORDER BY ord.order_idx asc )AS RNUM
			FROM bg_order_detail od
			JOIN bg_order ord ON ord.order_idx = od.order_idx
			JOIN bg_option op ON op.oidx = od.oidx
			JOIN bg_product pr ON pr.pidx = op.pidx
			JOIN BG_IMAGE im ON im.pidx = pr.pidx
			JOIN bg_delivery de ON de.order_idx = ord.order_idx
			LEFT OUTER JOIN  open_a_2021.bg_review re ON re.DETAIL_IDX = od.detail_idx
			WHERE ord.midx=#{midx}
			
			<if test='scri.kind == "B"'><![CDATA[AND ord.rdate >= sysdate()]]></if>
			<if test='scri.kind == "C"'><![CDATA[AND ord.rdate >= DATE_ADD(sysdate(), INTERVAL -1 WEEK )]]></if>
			<if test='scri.kind == "D"'><![CDATA[AND ord.rdate >= DATE_ADD(sysdate(), INTERVAL -1 MONTH )]]></if>
			<if test='scri.kind == "E"'><![CDATA[AND ord.rdate >= DATE_ADD(sysdate(), INTERVAL -3 MONTH )]]></if>
			<if test='scri.kind == "F"'><![CDATA[AND ord.rdate >= DATE_ADD(sysdate(), INTERVAL -6 MONTH )]]></if>
			<if test='scri.kind == "G"'>AND ord.rdate BETWEEN DATE_FORMAT(#{scri.rdate1},'%Y-%m-%d') AND DATE_FORMAT(#{scri.rdate2},'%Y-%m-%d')</if>
			
			AND now() >= date_add(now(), interval -3 month)
			ORDER BY ord.order_idx desc, od.detail_idx desc) A
        WHERE RNUM =1
        Limit #{startPost},#{scri.perPageNum}
	</select>
	  
	 <!-- order_idx로  추가 마일리지가 있는지 계산 --> 
	<select id="addmileage_check" parameterType="int" resultType="int">
		SELECT addmileage FROM bg_order WHERE order_idx=#{order_idx}
	</select>
	  
	 <!-- order_idx로 구매확정 하기 -->
	 <update id="confirm_fn" parameterType="int">
	 	UPDATE bg_delivery SET confirm_yn='Y' WHERE order_idx=#{order_idx}
	 </update>
	  
	  <!-- addmileage값을 가져와서 회원 마일리지에 더하기ㅡㅑ -->
	  <update id="addmileage_user" parameterType="CombineVO">
	  	UPDATE bg_user SET mileage=mileage+#{mileage} where midx=#{midx}
	  </update>
	  
	  	 <!-- order_idx로 적립금 0원으로 만들기 -->
	 <update id="addmileage_zero" parameterType="int">
	 	UPDATE bg_order SET addmileage=0 WHERE order_idx=#{order_idx}
	 </update>
	  
	  <!-- order_idx로 구매한 상품들 정보 가져 오기 -->
	  <select id="order_list" parameterType="int" resultType="CombineVO">
	 	SELECT bp.pidx, bo.recipient, bo.rphone, bo.addr1, bo.addr2, bp.pname, bi.main, bop.oname, 
	  			bod.quantity, bo.payment, bo.tot_price,bo.zip_code,bo.order_idx, re.ridx, bod.detail_idx
		FROM bg_order bo
		JOIN bg_order_detail bod ON bo.order_idx = bod.order_idx
		JOIN bg_option bop ON bod.oidx = bop.oidx
		JOIn bg_product bp ON bp.pidx = bop.pidx
		JOIN bg_image bi oN bi.pidx = bp.pidx
        LEFT OUTER JOIN  bg_review re ON re.DETAIL_IDX = bod.detail_idx
		WHERE bo.order_idx=#{order_idx}
	  </select>
	  
	  <!-- 구매한 물품에 대한 교환/취소/반품 등록 -->
	  <insert id="return_delivery_question" parameterType="QuestionVO">
	  	INSERT INTO bg_question (qidx, originqidx, midx, category, title, content, order_idx)
		VALUES (#{qidx}, #{qidx}, #{midx}, #{category}, #{title}, #{content}, #{order_idx} )
		<selectKey resultType="int" keyProperty="qidx" order="BEFORE">
          SELECT MAX(qidx)+1 FROM bg_question
       </selectKey>
	  </insert>
	  
	  <!-- 구매한 물품에 대한 교환,취소,환불 배송정보 변경 -->
	  <update id="return_delivery" parameterType="CombineVO">
	  	UPDATE bg_delivery SET
	  	  	<if test='kind == "D"'>exchange = 'N'</if>
	  	   	<if test='kind == "E"'>refund = 'N'</if>
	  		<if test='kind == "F"'>cancel = 'N'</if>
	  	WHERE order_idx=#{order_idx}
	  </update>
</mapper>